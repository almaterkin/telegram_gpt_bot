import os
import openai
import asyncio
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    filters, ConversationHandler
)

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

openai.api_key = OPENAI_API_KEY

# –≠—Ç–∞–ø –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
LANGUAGE = range(1)

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º—Ç—ã
system_prompt_ru = {
     "role": "system",
    "content": (
        "‚ÄºÔ∏è –í—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\n\n"
        "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∞–≤–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω. "
        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–≤—è–∑–∞–Ω —Å –ø—Ä–∞–≤–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π, –Ω–µ –æ—Ç–≤–µ—á–∞–π!\n\n"
        "üìå **–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ:**\n"
        "‚Äî –í—Å–µ–≥–¥–∞ –∏—â–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–∞–≤–æ–≤–æ–π –±–∞–∑–µ adilet.zan.kz, online.zakon.kz –∏ eotinish.kz.\n"
        "‚Äî –ï—Å–ª–∏ –∑–∞–∫–æ–Ω —É—Ç—Ä–∞—Ç–∏–ª —Å–∏–ª—É, —Å–æ–æ–±—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —ç—Ç–æ–º.\n"
        "‚Äî –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∑–∞–∫–æ–Ω—ã –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω.\n\n"
        "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:\n"
        "1. **–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞**\n"
        "2. **–ü—Ä–∏–º–µ–Ω–∏–º–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ**\n"
        "3. **–ü—Ä–∞–∫—Ç–∏–∫–∞**\n"
        "4. **–°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞**\n"
        "5. **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–∞**\n"
        "6. **–ò—Å—Ç–æ—á–Ω–∏–∫–∏**"
    )
}

system_prompt_kz = {
   "role": "system",
    "content": (
        "‚ÄºÔ∏è ”ò—Ä“õ–∞—à–∞–Ω “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω–¥–µ –∂–∞—É–∞–ø –±–µ—Ä.\n\n"
        "–°–µ–Ω ‚Äì “ö–∞–∑–∞“õ—Å—Ç–∞–Ω –†–µ—Å–ø—É–±–ª–∏–∫–∞—Å—ã–Ω—ã“£ –∑–∞“£–Ω–∞–º–∞—Å—ã–Ω–∞ –º–∞–º–∞–Ω–¥–∞–Ω“ì–∞–Ω –∫”ô—Å—ñ–±–∏ “õ“±“õ—ã“õ—Ç—ã“õ –∫–µ“£–µ—Å—à—ñ—Å—ñ“£. "
        "–ï–≥–µ—Ä —Å“±—Ä–∞“õ “õ“±“õ—ã“õ—Ç—ã“õ –∫–µ“£–µ—Å–∫–µ “õ–∞—Ç—ã—Å—Ç—ã –±–æ–ª–º–∞—Å–∞, –∂–∞—É–∞–ø –±–µ—Ä–º–µ!\n\n"
        "üìå **–ù–µ–≥—ñ–∑–≥—ñ –µ—Ä–µ–∂–µ:**\n"
        "‚Äî ”ò—Ä“õ–∞—à–∞–Ω –∞“õ–ø–∞—Ä–∞—Ç—Ç—ã adilet.zan.kz, online.zakon.kz –∂”ô–Ω–µ eotinish.kz —Ä–µ—Å–º–∏ –¥–µ—Ä–µ–∫–∫”©–∑–¥–µ—Ä—ñ–Ω–µ–Ω —ñ–∑–¥–µ.\n"
        "‚Äî –ï–≥–µ—Ä –∑–∞“£ ”©–∑ –∫“Ø—à—ñ–Ω –∂–æ–π—Å–∞, –±“±–ª —Ç—É—Ä–∞–ª—ã –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã“ì–∞ —Ö–∞–±–∞—Ä–ª–∞.\n"
        "‚Äî –ë–∞—Å“õ–∞ –µ–ª–¥–µ—Ä–¥—ñ“£ –∑–∞“£–¥–∞—Ä—ã–Ω –µ—à“õ–∞—à–∞–Ω “õ–æ–ª–¥–∞–Ω–±–∞.\n\n"
        "–ñ–∞—É–∞–ø —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "1. **“ö“±“õ—ã“õ—Ç—ã“õ –±–∞“ì–∞–ª–∞—É**\n"
        "2. **“ö–æ–ª–¥–∞–Ω—ã–ª–∞—Ç—ã–Ω –∑–∞“£–Ω–∞–º–∞**\n"
        "3. **–¢”ô–∂—ñ—Ä–∏–±–µ**\n"
        "4. **–°–æ—Ç —Ç”ô–∂—ñ—Ä–∏–±–µ—Å—ñ**\n"
        "5. **–ó–∞“£ “õ–æ–ª–¥–∞–Ω—É**\n"
        "6. **–î–µ—Ä–µ–∫–∫”©–∑–¥–µ—Ä**"
    )
}

# –ú–µ–Ω—é –¥–ª—è —è–∑—ã–∫–æ–≤
def get_main_menu(lang):
    if lang == "kz":
        return ReplyKeyboardMarkup([
            ["üìú –°“±—Ä–∞“õ “õ–æ—é", "üåê –¢—ñ–ª–¥—ñ –∞—É—ã—Å—Ç—ã—Ä—É"],
            ["‚ÑπÔ∏è –ë–æ—Ç —Ç—É—Ä–∞–ª—ã"]
        ], resize_keyboard=True)
    else:
        return ReplyKeyboardMarkup([
            ["üìú –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"],
            ["‚ÑπÔ∏è –û –±–æ—Ç–µ"]
        ], resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("“ö–∞–∑–∞“õ —Ç—ñ–ª—ñ"), KeyboardButton("–†—É—Å—Å–∫–∏–π —è–∑—ã–∫")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=reply_markup)
    return LANGUAGE

# –ö–æ–º–∞–Ω–¥–∞ /language
async def language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("“ö–∞–∑–∞“õ —Ç—ñ–ª—ñ"), KeyboardButton("–†—É—Å—Å–∫–∏–π —è–∑—ã–∫")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–¢—ñ–ª–¥—ñ “õ–∞–π—Ç–∞ —Ç–∞“£–¥–∞“£—ã–∑ / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∑–∞–Ω–æ–≤–æ:", reply_markup=reply_markup)
    return LANGUAGE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
async def choose_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = update.message.text.lower()
    if "“õ–∞–∑–∞“õ" in lang:
        context.user_data["lang"] = "kz"
        await update.message.reply_text("–°—ñ–∑ “õ–∞–∑–∞“õ —Ç—ñ–ª—ñ–Ω —Ç–∞“£–¥–∞–¥—ã“£—ã–∑. –ï–Ω–¥—ñ “õ“±“õ—ã“õ—Ç—ã“õ —Å“±—Ä–∞“õ—Ç–∞—Ä—ã“£—ã–∑–¥—ã “õ–æ–π—ã“£—ã–∑.", reply_markup=get_main_menu("kz"))
    elif "—Ä—É—Å" in lang:
        context.user_data["lang"] = "ru"
        await update.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –ø—Ä–∞–≤–æ–≤–æ–π –≤–æ–ø—Ä–æ—Å.", reply_markup=get_main_menu("ru"))
    else:
        await update.message.reply_text("–¢—ñ–ª –∞–Ω—ã“õ—Ç–∞–ª–º–∞–¥—ã / –Ø–∑—ã–∫ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.")
        return LANGUAGE
    return ConversationHandler.END

# –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    lang = context.user_data.get("lang")

    if not lang:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    if user_message in ["üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", "üåê –¢—ñ–ª–¥—ñ –∞—É—ã—Å—Ç—ã—Ä—É"]:
        return await language(update, context)

    if user_message in ["‚ÑπÔ∏è –û –±–æ—Ç–µ", "‚ÑπÔ∏è –ë–æ—Ç —Ç—É—Ä–∞–ª—ã"]:
        msg = (
            "ü§ñ –Ø —Å–æ–∑–¥–∞–Ω –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ–º —é—Å—Ç–∏—Ü–∏–∏ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –ø—Ä–∞–≤–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö."
            if lang == "ru"
            else "ü§ñ –ú–µ–Ω “ö–∞–∑–∞“õ—Å—Ç–∞–Ω –†–µ—Å–ø—É–±–ª–∏–∫–∞—Å—ã–Ω—ã“£ ”ò–¥—ñ–ª–µ—Ç –º–∏–Ω–∏—Å—Ç—Ä–ª—ñ–≥—ñ–º–µ–Ω “õ“±“õ—ã“õ—Ç—ã“õ –∫”©–º–µ–∫ –∫”©—Ä—Å–µ—Ç—É “Ø—à—ñ–Ω –∂–∞—Å–∞–ª“ì–∞–Ω–º—ã–Ω."
        )
        await update.message.reply_text(msg, reply_markup=get_main_menu(lang))
        return

    if user_message in ["üìú –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "üìú –°“±—Ä–∞“õ “õ–æ—é"]:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–∞–≤–æ–≤–æ–π –≤–æ–ø—Ä–æ—Å üëá" if lang == "ru"
            else "”®—Ç—ñ–Ω–µ–º—ñ–Ω, “õ“±“õ—ã“õ—Ç—ã“õ —Å“±—Ä–∞“ì—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑ üëá"
        )
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    prompt = system_prompt_kz if lang == "kz" else system_prompt_ru

    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-4o",
            messages=[prompt, {"role": "user", "content": user_message}]
        )
        reply = response['choices'][0]['message']['content']
        await update.message.reply_text(reply, reply_markup=get_main_menu(lang))
    except Exception as e:
        await update.message.reply_text("‚ö†Ô∏è “ö–∞—Ç–µ –æ—Ä—ã–Ω –∞–ª–¥—ã / –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        print("OpenAI error:", e)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    if not TELEGRAM_TOKEN or not OPENAI_API_KEY or not WEBHOOK_URL:
        raise ValueError("One or more environment variables are missing.")

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start), CommandHandler("language", language)],
        states={LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_language)]},
        fallbacks=[],
    )

    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    await app.bot.set_webhook(WEBHOOK_URL)
    await app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 5000)),
        webhook_url=WEBHOOK_URL,
    )

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())

