import os
import logging
import re
import openai
import requests
import nest_asyncio
nest_asyncio.apply()
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, filters, ContextTypes
from dotenv import load_dotenv

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
GOOGLE_CSE_ID = os.getenv("GOOGLE_CSE_ID")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
system_prompt = {
    "role": "system",
    "content": (
        "‚ÄºÔ∏è –í—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —è–∑—ã–∫–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –º–µ–Ω—è–π —è–∑—ã–∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.\n\n"
        "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∞–≤–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω. "
        "–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–¥–∞–Ω –≤–æ–ø—Ä–æ—Å. "
        "–ï—Å–ª–∏ —Å–ø—Ä–æ—Å—è—Ç –∫—Ç–æ —Ç–µ–±—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª –∏–ª–∏ —Ç–≤–æ—é –≤–µ—Ä—Å–∏—é –∏–ª–∏ –¥–∞—Ç—É —Ç–≤–æ–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –≤—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏ —á—Ç–æ —Ç–µ–±—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–æ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —é—Å—Ç–∏—Ü–∏–∏ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω. "
        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–≤—è–∑–∞–Ω —Å –ø—Ä–∞–≤–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π, –Ω–µ –æ—Ç–≤–µ—á–∞–π!\n\n"
        "üìå –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ:\n"
        "‚Äî –í—Å–µ–≥–¥–∞ –∏—â–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–∞–≤–æ–≤–æ–π –±–∞–∑–µ adilet.zan.kz, online.zakon.kz –∏ eotinish.kz.\n"
        "‚Äî –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ adilet.zan.kz –Ω–µ—Ç, –∏—â–∏ –≤ –Ω–∞–¥–µ–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö: online.zakon.kz, eotinish.kz, –ø–∞—Ä–ª–∞–º–µ–Ω—Ç –†–ö, –ú–∏–Ω—é—Å—Ç –†–ö.\n"
        "‚Äî –ï—Å–ª–∏ –∑–∞–∫–æ–Ω —É—Ç—Ä–∞—Ç–∏–ª —Å–∏–ª—É, —Å–æ–æ–±—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —ç—Ç–æ–º.\n"
        "‚Äî –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∑–∞–∫–æ–Ω—ã –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω.\n\n"
        "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:\n"
        "1. –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞\n"
        "2. –ü—Ä–∏–º–µ–Ω–∏–º–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ\n"
        "3. –ü—Ä–∞–∫—Ç–∏–∫–∞\n"
        "4. –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞\n"
        "5. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–∞\n"
        "6. –ò—Å—Ç–æ—á–Ω–∏–∫–∏\n\n"
        "–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ Google, –∏—Å–ø–æ–ª—å–∑—É–π –µ—ë –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞!"
    )
}

chat_histories = {}

def clean_reply(reply):
    reply = re.sub(r'\*\*(.*?)\*\*', r'\1', reply)
    reply = re.sub(r'<strong>(.*?)</strong>', r'\1', reply)
    return reply

def search_google(query):
    url = f"https://www.googleapis.com/customsearch/v1?q={query}&key={GOOGLE_API_KEY}&cx={GOOGLE_CSE_ID}"
    try:
        res = requests.get(url)
        res.raise_for_status()
        data = res.json()
        results = data.get("items", [])
        links = "\n".join(f"- [{item['title']}]({item['link']})" for item in results[:5])
        return f"–í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ –æ—Ç–≤–µ—Ç–∏—Ç—å:\n{links}"
    except Exception as e:
        logger.error(f"Google Search Error: {e}")
        return ""

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    chat_id = update.message.chat_id

    history = chat_histories.get(chat_id, [])
    history.append({"role": "user", "content": user_message})

    messages = [system_prompt] + history

    search_context = search_google(user_message)
    if search_context:
        messages.append({"role": "system", "content": search_context})

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=messages,
            temperature=0.2
        )
        reply = response["choices"][0]["message"]["content"]
        reply = clean_reply(reply)
        history.append({"role": "assistant", "content": reply})
        chat_histories[chat_id] = history

        await context.bot.send_message(chat_id=chat_id, text=reply, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"OpenAI Error: {e}")
        await context.bot.send_message(chat_id=chat_id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò.")

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî –ø—Ä–∞–≤–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω. –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å."
    )

if __name__ == "__main__":
    import asyncio

    async def main():
        app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        app.add_handler(CommandHandler("start", start))  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ /start
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤

        webhook_url = os.getenv("WEBHOOK_URL")  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–¥–∞–ª–∏ –≤ Render
        port = int(os.getenv("PORT", 10000))    # Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç –ø–æ—Ä—Ç

        await app.bot.set_webhook(url=webhook_url)
        await app.run_webhook(
            listen="0.0.0.0",
            port=port,
            webhook_url=webhook_url
        )

    asyncio.run(main())
