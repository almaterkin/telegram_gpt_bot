import os
import logging
import openai
import uvicorn
import nest_asyncio
from fastapi import FastAPI, Request
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes
)

# –î–ª—è —Ä–∞–±–æ—Ç—ã asyncio –≤–Ω—É—Ç—Ä–∏ uvicorn
nest_asyncio.apply()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 10000))

openai.api_key = OPENAI_API_KEY

# Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
bot_app = Application.builder().token(TELEGRAM_TOKEN).build()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø—Ä–∞–≤–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")

bot_app.add_handler(CommandHandler("start", start))

# FastAPI
app = FastAPI()

@app.on_event("startup")
async def startup():
    await bot_app.initialize()  # üîß –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!
    await bot_app.bot.set_webhook(WEBHOOK_URL)
    logging.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

@app.on_event("shutdown")
async def shutdown():
    await bot_app.shutdown()

@app.post("/telegram")
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, bot_app.bot)
    await bot_app.process_update(update)
    return {"ok": True}

# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–Ω–µ –Ω—É–∂–µ–Ω –Ω–∞ Render)
if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=PORT, reload=False)
