import os
import logging
import openai
import uvicorn
import nest_asyncio
import requests
from fastapi import FastAPI, Request
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –î–ª—è —Ä–∞–±–æ—Ç—ã asyncio –≤–Ω—É—Ç—Ä–∏ uvicorn
nest_asyncio.apply()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
GOOGLE_CSE_ID = os.getenv("GOOGLE_CSE_ID")
PORT = int(os.getenv("PORT", 10000))

openai.api_key = OPENAI_API_KEY

# Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
bot_app = Application.builder().token(TELEGRAM_TOKEN).build()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø—Ä–∞–≤–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç ”ò–¥—ñ–ª–µ—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")

bot_app.add_handler(CommandHandler("start", start))

# üîé –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ Google Custom Search
def search_google(query):
    url = f"https://www.googleapis.com/customsearch/v1?q={query}&key={GOOGLE_API_KEY}&cx={GOOGLE_CSE_ID}"
    try:
        res = requests.get(url)
        res.raise_for_status()
        data = res.json()
        results = data.get("items", [])
        links = "\n".join(f"- {item['title']}: {item['link']}" for item in results[:5])
        return f"üîé –ù–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ Google:\n{links}"
    except Exception as e:
        logging.error(f"Google Search Error: {e}")
        return ""

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenAI
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    chat_id = update.message.chat_id

    try:
        messages = [
            {"role": "system", "content": (
                "‚ÄºÔ∏è –í—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —è–∑—ã–∫–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –º–µ–Ω—è–π —è–∑—ã–∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.\n\n"
                "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∞–≤–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω. "
                "–í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–¥–∞–Ω –≤–æ–ø—Ä–æ—Å. "
                "–ï—Å–ª–∏ —Å–ø—Ä–æ—Å—è—Ç –∫—Ç–æ —Ç–µ–±—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª –∏–ª–∏ —Ç–≤–æ—é –≤–µ—Ä—Å–∏—é –∏–ª–∏ –¥–∞—Ç—É —Ç–≤–æ–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –≤—Å–µ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏ —á—Ç–æ —Ç–µ–±—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–æ –ú–∏–Ω–∏—Å—Ç–µ—Ä—Å—Ç–≤–æ —é—Å—Ç–∏—Ü–∏–∏ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω. "
                "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ —Å–≤—è–∑–∞–Ω —Å –ø—Ä–∞–≤–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π, –Ω–µ –æ—Ç–≤–µ—á–∞–π!\n\n"
                "üìå –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ:\n"
                "‚Äî –í—Å–µ–≥–¥–∞ –∏—â–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –ø—Ä–∞–≤–æ–≤–æ–π –±–∞–∑–µ adilet.zan.kz, online.zakon.kz –∏ eotinish.kz.\n"
                "‚Äî –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞ adilet.zan.kz –Ω–µ—Ç, –∏—â–∏ –≤ –Ω–∞–¥–µ–∂–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö: online.zakon.kz, eotinish.kz, –ø–∞—Ä–ª–∞–º–µ–Ω—Ç –†–ö, –ú–∏–Ω—é—Å—Ç –†–ö.\n"
                "‚Äî –ï—Å–ª–∏ –∑–∞–∫–æ–Ω —É—Ç—Ä–∞—Ç–∏–ª —Å–∏–ª—É, —Å–æ–æ–±—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —ç—Ç–æ–º.\n"
                "‚Äî –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∑–∞–∫–æ–Ω—ã –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω.\n\n"
                "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:\n"
                "1. –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞\n"
                "2. –ü—Ä–∏–º–µ–Ω–∏–º–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ\n"
                "3. –ü—Ä–∞–∫—Ç–∏–∫–∞\n"
                "4. –°—É–¥–µ–±–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞\n"
                "5. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–∞\n"
                "6. –ò—Å—Ç–æ—á–Ω–∏–∫–∏\n\n"
                "–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ Google, –∏—Å–ø–æ–ª—å–∑—É–π –µ—ë –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞!"
            )},
            {"role": "user", "content": user_message}
        ]

        search_context = search_google(user_message)
        if search_context:
            messages.append({"role": "system", "content": search_context})

        response = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=messages
        )
        answer = response["choices"][0]["message"]["content"]
        await context.bot.send_message(chat_id=chat_id, text=answer)

        import traceback
        except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ OpenAI:\n" + traceback.format_exc())
        await context.bot.send_message(chat_id=chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# FastAPI
app = FastAPI()

@app.on_event("startup")
async def startup():
    await bot_app.initialize()
    await bot_app.bot.set_webhook(WEBHOOK_URL)
    logging.info("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

@app.on_event("shutdown")
async def shutdown():
    await bot_app.shutdown()

@app.post("/telegram")
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, bot_app.bot)
    await bot_app.process_update(update)
    return {"ok": True}

# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ (–Ω–µ –Ω—É–∂–µ–Ω –Ω–∞ Render)
if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=PORT, reload=False)
